#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>
#include <cassert>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include "p-ranav/argparse.hpp"
//#include "argparse.hpp"

#include "SheepSaver.hpp"
using namespace std;
typedef std::vector< std::vector<int>> Matrix;
int rows;
int cols;

enum { White, Black, Sheep, Wolf };
int currentPlayer = Sheep;
class SheepBoard {
public:
    void display (int =8, int=8) {
        
        std::string piece = "";
        for (int i = 0; i < rows; i++) {
            std::cout << "   +";
            for (int j = 0; j < cols; j++) {
                std::cout << "---+";
            }
            std::cout << "\n";
            if (i < 10) {
                std::cout << " " << rows-i << " |" ;
            } else {
                std::cout << "" << rows-i << " |" ;
            }
            
            for (int j = 0; j < cols; j++) {
                piece = PIECES[board[i][j]];
                std::cout << piece << "|";
            }
            std::cout << "\n";
        }
        std::cout << "   +";
        for (int j = 0; j < cols; j++) {
            std::cout << "---+";
        }
        std::cout << "\n";
        std::cout << "   ";
        for (int j = 0; j < cols; j++) {
            std::cout << "  " << LETTERS[j] << " " ;
        }
        std::cout << "\n";
        // do your looping and display
    }
    
    void move(std::string mv) {
        while(true) {
            std::string from = "";
            std::string to = "";
            //            moves.push_back(mv);
            if( currentPlayer==Wolf){
                std::cout << "Moving Womv" << mv << std::endl;
            }
            size_t found = mv.find("-");
            from = mv.substr(0, found);
            to = mv.substr(found + 1, mv.size());
            int x1, y1, x2, y2 = 0;
            x1 = getColumn(from.substr(0, 1));
            x2 = getColumn(to.substr(0, 1));
            y1 = 8 - std::atoi(from.substr(1, from.length() - 1).c_str());
            y2 = 8 - std::atoi(to.substr(1, to.length() - 1).c_str());
            
            if (mv.length() != 5 || mv[2] != '-') {
                std::cout << "Invalid input. Please try again." << std::endl;
                return;
            }
            if (x1 < 0 || x1 >= board[0].size() || y1 < 0 || y1 >= board.size() ||
                x2 < 0 || x2 >= board[0].size() || y2 < 0 || y2 >= board.size()) {
                std::cout << "Invalid move. Position out of range." << std::endl;
                return;
            }
            if (x1 < 0 || x1 >= board[0].size() || y1 < 0 || y1 >= board.size() ||
                x2 < 0 || x2 >= board[0].size() || y2 < 0 || y2 >= board.size()) {
                std::cout << "Invalid move. Position out of range." << std::endl;
                SheepBoard::menu();
            
            }
            
            if ((board[y1][x1] != Sheep && board[y2][x2] != Black) || (board[y1][x1] != Wolf && board[y2][x2] != Black)) {
                std::cout << "Invalid move. The 'from' position is not a valid position or the 'to' position is not empty." << std::endl;
             
                SheepBoard::menu();
                
            }
            if ((currentPlayer == Sheep && board[y1][x1] != Sheep) || (currentPlayer == Wolf && board[y1][x1] != Wolf)) {
                std::cout << "Invalid move. From position is not a valid field for the current player." << std::endl;
                SheepBoard::menu();
            }
            
            if (currentPlayer == Sheep && std::abs(x2 - x1) != 1) {
                std::cout << "Invalid move. Only diagonally moves to an adjacent position." << std::endl;
                SheepBoard::menu();
            }
            
            
            int current = board[y2][x2];
            board[y2][x2] = board[y1][x1];
            board[y1][x1] = current;
            display(8, 8);
            
            usleep(1000 * 1000);
            auto start = std::chrono::high_resolution_clock::now();
            usleep(1000 * 1000);
            auto end = std::chrono::high_resolution_clock::now();
            std::chrono::duration<double> elapsed = end - start;
            std::cout << "Thinking time: " << elapsed.count() << " seconds" << std::endl;
            if(currentPlayer==Wolf){
                cout << "WOlf Move successful." << endl;
            }
            else{
                cout << "SHEEP Move successful." << endl;
            }
            currentPlayer = (currentPlayer == Sheep) ? Wolf : Sheep; // Alternate between Sheep and Wolf
            SheepBoard::menu();
        }
        
    }
    
    void menu() { //that with quit the user can end the move
        
        // Start with Sheep player
        std::string move;
        
        if (currentPlayer==Sheep){
            cout<<"Enter quit to quit"<<endl;
            std::cout << "Select a move in the format (A1-B2: Sheep): ";
            std::cin >> move;
            if (move == "quit") {
                        return; // Exit the game
                    }
            SheepBoard::move(move);
        }
        
        if(currentPlayer==Wolf) {
            // Wolf's turn
            makeAutomaticWolfMove(*this);
        }
        
    }
    
    
    void save () {
        saver.save(board);
    }
private:
    int getColumn(std::string col) {
        // return the index from the LETTERS variable
        // belonging to the letter in col
        for (int i = 0; i < LETTERS.size();i++) {
            if (LETTERS[i] == col) {
                return(i);
            }
        }
        return(1);
    }
    std::string getPositionString(int x, int y) {
        std::string position = "";
        // Convert column index to letter
        position += static_cast<char>('A' + y);
        // Convert row index to number (assuming 8x8 board)
        position += std::to_string(8 - x); //change to for larger boards
        
        return position;
    }
    // some suggestions
    Matrix board = {
        {White, Wolf,  White, Black, White, Black, White, Black, White, Black, White, Black},
        {Black, White, Black, White, Black, White, Black, White, Black, White, Black, White},
        {White, Black, White, Black, White, Black, White, Black, White, Black, White, Black},
        {Black, White, Black, White, Black, White, Black, White, Black, White, Black, White},
        {White, Black, White, Black, White, Black, White, Black, White, Black, White, Black},
        {Black, White, Black, White, Black, White, Black, White, Black, White, Black, White},
        {White, Black, White, Black, White, Black, White, Black, White, Black, White, Black},
        {Sheep, White, Sheep, White, Sheep, White, Sheep, White, Sheep, White, Sheep, White}};
    std::vector<std::string> moves = {};
    std::vector<std::string> LETTERS = {"A","B","C","D","E","F","G","H", "I","J","K","L","M"};
    std::vector<std::string> PIECES  = {"   ", " - ", " \u26C0 ", " \u26C0 "};
    SheepSaver saver;

    void makeAutomaticWolfMove(SheepBoard& board) {
        while(true){
        cout<<"Wolf's turn\n";
        //Find the current wolf position
        
        int wolfY = -1; // column
        int wolfX = -1; // row
        
        for (int i = 0; i < board.board.size(); ++i) {
            for (int j = 0; j < board.board[i].size(); ++j) {
                if (board.board[i][j] == Wolf) {
                    wolfY = j;
                    wolfX = i;
                    break; // Wolf position found, break the inner loop
                }
            }
            
            if (wolfY != -1 && wolfX != -1) {
                cout << "Wolf position found at (" << 8 -  wolfX << ", " << wolfY << ")" << endl;
                break; // Current position found, break the outer loop
            }
        }
        
        if (wolfY == -1 || wolfX == -1) {
            cout << "Wolf position not found" << endl;
        }
        cout << "Wolf position found at (" << wolfX << ", " << wolfY << ")" << endl;
        
        //decrease row by -1
        int dx = 1; //row
        //use a random generator to either move left or right
        int dy= 0;//column
        
        if (wolfX <= 3){
            dy=1 ;
        }
        else if (wolfX > 3 && wolfX < 5){
            std::srand(static_cast<unsigned int>(std::time(nullptr)));
            
            // Generate a random number between 0 and 1
            int randomNum = std::rand() % 2;
            // Return +1 or -1 based on the generated number
            dy = (randomNum == 0) ? -1 : 1;
        }
        if (wolfX >= 5) {
            std::srand(static_cast<unsigned int>(std::time(nullptr)));
            
            // Generate a random number between 0 and 1
            int randomNum = std::rand() % 2;
            // Return +1 or -1 based on the generated number
            dy = (randomNum == 0) ? -1 : 1;
                if ((board.board[7][0] == Black || board.board[7][2] == Black || board.board[7][4] == Black || board.board[7][6] == Black) &&
                    board.board[wolfX + dx][wolfY + dy] == Sheep) {
                    dx = -1;
                    std::srand(static_cast<unsigned int>(std::time(nullptr)));
                    
                    // Generate a random number between 0 and 1
                    int randomNum = std::rand() % 2;
                    // Return +1 or -1 based on the generated number
                    dy = (randomNum == 0) ? -1 : 1;
                }
                else{
                    dx=1;
                    
                }
            }

        cout << "dy =" << dy << endl;
        
            // Validate range of the next move
            if (wolfX + dx < 0 && (wolfY + dy > board.board[0].size() || wolfY + dy < board.board[0].size())) {
                //wolfX + dx < 0
                cout<<"Moving" << (getPositionString(wolfY, wolfX) + "-" + getPositionString(wolfY + dx, wolfX + dy))<< endl;
                cout<< "Invalid wolf move, out of range"; //allow the wolf to play again
                cout<< "Try again";
                continue;;
            }
            
            if (wolfX + dx > 0 && wolfY + dy >= 0 && board.board[wolfX + dx][wolfY + dy] == Black && board.board[wolfX + dx][wolfY + dy] != Sheep) {
                // Update the board with the new wolf position
                cout<<"Moving WOLF " << (getPositionString(wolfX, wolfY) + "-" + getPositionString(wolfX + dx, wolfY + dy))<< endl;
                
                board.move(getPositionString(wolfX, wolfY) + "-" + getPositionString(wolfX + dx, wolfY + dy));
                
                
                // Display the updated board
                //board.display();
                
                return;
            }
            
            if (wolfX + dx > 0 && wolfY + dy >= 0 && board.board[wolfX + dx][wolfY + dy] == Sheep) {
                cout<< "Wolf Move Blocked\n";
                cout<< "Try again\n";
                continue;
            }
            
            if (wolfX == 7 && (wolfY == 0 || wolfY == 2 || wolfY == 4 || wolfY == 6)) {
                std::cout << "Wolf reached the target position. Game over\n!" << std::endl;
                return;
            }
            else{
                cout<<"Impossible move\n";
                return;
            }
            
        }
    }
};

int main(int argc, const char* argv[]) {
    
    // Parse command-line arguments
    argparse::ArgumentParser parser("SheepBoard Game");
    parser.add_argument("-s", "--small")
        .help("Set small board size (8x8)")
        .default_value(false)
        .implicit_value(true);
    parser.add_argument("-m", "--medium")
        .help("Set medium board size (10x10)")
        .default_value(false)
        .implicit_value(true);
    parser.add_argument("-l", "--large")
        .help("Set large board size (12x12)")
        .default_value(false)
        .implicit_value(true);

    try {
        parser.parse_args(argc, argv);
    } catch (const std::runtime_error& err) {
        std::cout << err.what() << std::endl;
        std::cout << parser;
        return 1;
    }

    // Access the parsed command-line options
    bool useSmallBoard = parser.get<bool>("--small");
    bool useMediumBoard = parser.get<bool>("--medium");
    bool useLargeBoard = parser.get<bool>("--large");

    int rows, cols;

    // Determine the board size based on the command-line options
    if (useSmallBoard) {
        rows = 8;
        cols = 8;
    } else if (useMediumBoard) {
        rows = 10;
        cols = 10;
    } else if (useLargeBoard) {
        rows = 12;
        cols = 12;
    } else {
        rows = 8; // Default to small board size
        cols = 8;
    }
    SheepBoard board;
    // Rest of your code...
    board.display(rows, cols);
    usleep(1000 * 1000);
    board.save();
    board.menu(); // should not yet do anything

    return 0;
}


// compiling:
// g++ dg-sheep-2.cpp
// recording animated gif
// byzanz-record --duration=10 --x=10 --y=40 --width=400 \
//  height=400 out.gif & ./a.out


//https://cplusplus.com/doc/tutorial/files/ contains an example on how to write to files
//download the example output file and study the HTML code
//our save method should write this output file
//so instead of printing stuff to the terminal we write now to the file

//we have to write not only the board positions in td-tags but as well the code on top and at the end
//implement this functionality just assume for now a default filename report.html in which you write the current board position

//after every successful move you now write into the file report.html the current position

